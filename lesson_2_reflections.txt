##########################################
What happens when you initialize a repository? Why do you need to do it?

It create local repository from working directory.

##########################################
How is the staging area different from the working directory and the repository? What value do you think it offers?

staging is a middleman betwee working directory (where the changes are made) and repository (storing logical changes) to
keep track of the changes.

##########################################
--
How can you use the staging area to make sure you have one commit per logical change?

- make changes to a file in working dir
- git add <changed file> will add file to staging
- git diff --staged will show diff between staging and commit1
- git diff will show the diff between working dir and staging
- git diff <commit1> <commit2> will show diff between commits

---###---###---###---
Fixing mistakes:
- checkout commit and removed file game.js (using git rm)
- to restore file:
u1420238 ((25ede83...) +) asteroids $ git status game.js
HEAD detached at 25ede83
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        deleted:    game.js

u1420238 ((25ede83...) +) asteroids $ git reset HEAD game.js
Unstaged changes after reset:
D       game.js
u1420238 ((25ede83...) *) asteroids $ git status game.js
HEAD detached at 25ede83
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    game.js

no changes added to commit (use "git add" and/or "git commit -a")
u1420238 ((25ede83...) *) asteroids $ git checkout -- game.js
u1420238 ((25ede83...)) asteroids $ ll
total 304
...
-rwxr-xr-x+ 1 u1420238 Domain Users 31848 Feb 26 12:14 game.js
-rwxr-xr-x+ 1 u1420238 Domain Users 31879 Feb 25 14:42 game.js~
...
u1420238 ((25ede83...)) asteroids $ git status
HEAD detached at 25ede83
Untracked files:
  (use "git add <file>..." to include in what will be committed)

        game.js~

nothing added to commit but untracked files present (use "git add" to track)
FIXED: git diff returns nothing.
___###____###___

##########################################

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- need to test new ideas w/out disrupting master branch

##########################################
How do the diagrams help you visualize the branch structure?

- every commit must have a parent
- commit w/out a parent is initial commit
- diagrams helps keep track of relationship between branches
- also, helps realize where "unreachable" branches are

##########################################

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Result of murging 2 branches together is A NEW COMMIT with merged code created
from 2 parents.
Merged commits HAVE MULTIPLE PARENTS
Changes in diagram are sorted by date.
Command "git diff --graph --oneline" shows all changes from both parents,
merge point and further changes.

##########################################
What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Some answer
